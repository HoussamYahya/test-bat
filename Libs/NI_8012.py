import sys
#sys.path.append('d:\\Projects\\PythonTestBench\\Libs')
import wmi  # To be able to detect USB connected devices
from pyvirtualbench import PyVirtualBench
import time

PS_6V = "ps/+6V"
PS_25V_POS = "ps/+25V"
PS_25V_NEG = "ps/-25V"


class virtualBench:
    """
    Class that abstract the control of the NI virtual bench
    """
    def __init__(self):
        """
        Get the virtual bench connected to the computer
        Acquire the different resources
        Set power supply to off
        """
        # Detect the connected virtual bench
        c = wmi.WMI()
        for device in c.Win32_CDROMDrive():
            if device.Caption == "NI VB-8012 USB Device":
                self.name = "VB8012-" + device.SerialNumber
                print(f"NI virtual bench detected with ID {self.name}")
                # Get all the resources
                self.vb = PyVirtualBench(self.name)
                self.ps = self.vb.acquire_power_supply()
                self.mso = self.vb.acquire_mixed_signal_oscilloscope()
                break
        # Configure the resources
        if self.name is not None:
            self.ps.enable_all_outputs(False)
            self.ps.configure_voltage_output(PS_6V, 0.0, 0.1)
            self.ps.configure_voltage_output(PS_25V_POS, 0.0, 0.1)
            self.ps.configure_voltage_output(PS_25V_NEG, 0.0, 0.1)

    # Release the resources
    def release(self):
        """
        Set the virtual bench power supply to off
        Free the resources of the virtual bench
        """
        if self.ps is not None:
            self.ps.enable_all_outputs(False)
            self.ps.release()
        if self.mso is not None:
            self.mso.release()
        if self.vb is not None:
            self.vb.release()

    def ps_configure_output(self, output, voltage, current_limit):
        """
        Configure the voltage output
        :param output: voltage output to be configured (PS_6V, PS_25V_POS or PS_25V_NEG)
        :param voltage: voltage generated by the voltage output
        :param current_limit: current limit generated by the voltage output
        :return: none
        """
        self.ps.configure_voltage_output(output, voltage, current_limit)

    def ps_enable(self):
        """
        Enable the voltage output
        :return: none
        """
        self.ps.enable_all_outputs(True)
        time.sleep(1)

    def ps_disable(self):
        """
        Disable the voltage output
        :return: none
        """
        self.ps.enable_all_outputs(False)
        time.sleep(1)

    def ps_generate_por(self):
        """
        Generate a power on reset for the UUT
        :return:
        """
        self.ps_disable()
        self.ps_enable()

    def ps_get_current_consumption(self, output):
        """
        Read the power used by the output
        :param output: voltage output to be configured (PS_6V, PS_25V_POS or PS_25V_NEG)
        :return: Current used on the output
        """
        _, current, _ = self.ps.read_output(output)
        return current




